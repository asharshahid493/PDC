BANK.PY: THIS CODE USES MULTITHREADING TO PERFORM DEPOSIT AND WITHDRAWAL OPERATIONS ON A SHARED BALANCE WHILE MEASURING EXECUTION TIME.

DATA_PARALLELISM.PY: THIS CODE USES A THREAD POOL TO EXECUTE TWO TASKS (TASK_1 AND TASK_2) CONCURRENTLY USING THREADPOOLEXECUTOR.

DO_SOMETHING.PY: THIS CODE DEFINES A FUNCTION DO_SOMETHING THAT GENERATES RANDOM NUMBERS AND ADDS THEM TO A GIVEN LIST FOR A SPECIFIED COUNT.

FIBONACCI.PY: THIS CODE CREATES MULTIPLE THREADS TO CALCULATE THE 35TH FIBONACCI NUMBER CONCURRENTLY AND MEASURES THE TOTAL EXECUTION TIME.

HELLO.PY: THIS CODE PERFORMS DATA PARALLEL VECTOR ADDITION USING NUMPY, MEASURES THE COMPUTATION TIME, AND DISPLAYS THE FIRST 10 RESULTS.

IPC.PY: THIS CODE DEMONSTRATES INTER-PROCESS COMMUNICATION USING A QUEUE, WHERE A PRODUCER ADDS ITEMS AND A CONSUMER RETRIEVES THEM IN SEPARATE PROCESSES.

MPI.PY: THIS CODE USES MPI TO ENABLE COMMUNICATION BETWEEN PROCESSES, WHERE PROCESS 0 SENDS DATA TO PROCESS 1, AND OTHER PROCESSES REMAIN IDLE.

MULITPROCESSING.PY: THIS CODE COMPARES THE PERFORMANCE OF MULTIPROCESSING AND MULTITHREADING FOR A TASK THAT GENERATES LARGE RANDOM NUMBERS AND MEASURES THEIR EXECUTION TIMES.

PARALLELIZATION.PY: THIS CODE PERFORMS PARALLEL VECTOR ADDITION USING THREADS AND MEASURES EXECUTION TIME.

PROCESS_CREATION.PY: THIS CODE DEMONSTRATES MULTIPROCESSING TO CALCULATE THE SQUARE AND CUBE OF A NUMBER CONCURRENTLY.

SHARED_MEM.PY: THIS CODE DEMONSTRATES THREADING WITH A LOCK TO SAFELY MANAGE DEPOSITS AND WITHDRAWALS ON A SHARED BALANCE.

SYNCHRONIZATION.PY: THIS CODE DEMONSTRATES THE USE OF A SEMAPHORE TO CONTROL ACCESS TO A SHARED RESOURCE, ALLOWING ONLY ONE THREAD AT A TIME.
